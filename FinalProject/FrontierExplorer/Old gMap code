    def getFrontierList(self,givenMap):
        """
        This function finds and creates the list of distinct frontiers and returns it.
        :return: List of Frontiers, each frontier being a list of <(x,y) touples >
        :return: Raise FrontierException (defined in turtleException file) when there are no more frontiers
        """

        result = []

        for y, row in enumerate(givenMap):
            for x, elt in enumerate(row):
                # check to see if a given node is adjacent to the opposite kind of node
                # and check that it isn't in any frontier yet
                isAlreadyFound = False

                for list in result:
                    if (x, y) in list:
                        isAlreadyFound = True


                if (self.isNodeFrontier(x, y, givenMap) and not isAlreadyFound):
                    frontier = []

                    nodesToExplore = []
                    nodesToExplore.append((x,y))

                    while nodesToExplore.__len__() > 0:
                        currentNode = nodesToExplore.pop()
                        frontier.append(currentNode)

                        for n in self.getNeighborsFrontier(currentNode[0], currentNode[1], givenMap):
                            if not n in frontier and not n in nodesToExplore:
                                nodesToExplore.append(n)

                    result.append(frontier)

        print "Generated Frontier List of ", result.__len__()

        return result

    def frontierSize(self, targetFrontier):
        """
        :param targetFrontier: The frontier, a list of (x,y) points that make up a frontier

        :return: <int> representing the number of 'points' in the frontier
        """
        return len(targetFrontier)
        # TODO: Currently this just picks whichever point in the frontier is closest and goes there. Maybe not the best?

    def pickFrontier(self, frontierList, heuristic):
        """
        :param frontierList: List of Frontiers , list of list of <(x,y) touple > in grid cell location on the map
        :param heuristic: function that only requires a single frontier to make a decision.
        :return:an (x,y) touple of the point to go to in grid cell location on the map
        """
        targetFrontier = frontierList[0]

        print "Trying to find the best frontier"

        if len(frontierList) == 0:  # If there are no frontiers
            raise Exception("Passed in an empty frontier list!")

        ## Select the largest frontier
        elif len(frontierList) != 1:
            for elt in frontierList:
                # Check if the next frontier is a better candidate for travel
                # Assuming a larger Heuristic is better
                if heuristic(targetFrontier) < heuristic(elt):
                    targetFrontier = elt

        print "Found the best frontier, finding the closest point"
        print "Frontier contains ", targetFrontier.__len__(), " nodes"

        ## Find the closest point on the frontier
        currentTarget = targetFrontier[0]
        for elt in targetFrontier:
            # TODO: replace once frontier testing is done
            # if tools.distFormula(elt, (self.current_x, self.current_y)) < tools.distFormula(currentTarget, (
            if tools.distFormula(elt, (0, 0)) < tools.distFormula(currentTarget, (0, 0)):
                currentTarget = elt
                # TODO: Currently this just picks whichever point in the frontier is closest and goes there. Maybe not the best?

        print "Closest point found at: ", currentTarget

        return currentTarget

    def mapLocationMeters(self, mapLocationGridCells):
        """
        :param mapLocationGridCells: (x,y) touple of the location in grid cells
        :return:(x,y) touple of the location in meters
        """
        gridx, gridy = mapLocationGridCells

        midx = tools.degmapifyValue(float(gridx)+float(self.current_x))/2.0
        midy = tools.degmapifyValue(float(gridy)+float(self.current_y))/2.0

        print "The location you're about to go to is", gridx,gridy,"on the grid and",midx,midy,'on the map'
        return (midx, midy)



    def getNeighborsFrontier(self, x, y, givenMap):
        """
        Returns all the neighbors of a given node that are frontier nodes
        :param x:
        :param y:
        :return:
        """
        goodNeigbhors = self.getNeighbors(x, y, givenMap)

        edgeNeighbors = []

        for n in goodNeigbhors:
            nodeX, nodeY = n

            if self.isNodeFrontier(nodeX, nodeY, givenMap):
                edgeNeighbors.append(n)

        return edgeNeighbors

    def isNodeFrontier(self, x, y, givenMap):
        """
        Returns true if the given coordinate specific a node that:
            Is known reachable space
            Is adjacent to unknown space
        :param x:
        :param y:
        :return:
        """

        if (givenMap[y][x] > -1 and givenMap[y][x] < 50):
            neighbors = self.getNeighbors(x, y, givenMap)

            for n in neighbors:
                x, y = n
                if (givenMap[y][x] == -1):
                    return True

        return False

    def getNeighbors(self, x, y, givenMap, threshold=99):  # TODO Troy has a cleaver way to do this method with try/catches
        """
        This get's the neighbors of a specific point on the map. This function preemptively removes squares with
        values greater than the threshold. This allows us to remove walls and dangerous zones from the path planning

        :param x: x location of the point
        :param y: y location of the point
        :param threshold: threshold to decide if the value is travelable
        :return: None
        """

        height = givenMap[0].__len__()
        width = givenMap.__len__()

        if (y > width or x < 0 or y > height or y < 0):
            return {}
            print (x, y)
            raise ReferenceError("getNeighbors out of bound error on x or y coordinate.")
        # Goes through the values, ignores self
        gen_neighbors = [(x - 1, y - 1),
                         (x + 1, y + 1),
                         (x + 1, y - 1),
                         (x - 1, y + 1),
                         (x, y + 1),
                         (x, y - 1),
                         (x - 1, y),
                         (x + 1, y)]
        goodNeighbors = []
        for move in gen_neighbors:
            tx, ty = move
            try:
                if givenMap[ty][tx] < threshold:
                    goodNeighbors.append(move)
            except IndexError:
                continue
            except Exception, e:
                print "getNeighbors Error:"
                raise e
            """
                NOTE: The above thing is just querying the map and catching the index out of bounds errors if they happen.
                This code may not work if the IndexError is the incorrect error, in this case the 'except IndexError' line would have
                to be fixed. The 'except Exception,e' line is used to make sure that the other exceptions are caught
            """
        return goodNeighbors  # State farm joke goes here
